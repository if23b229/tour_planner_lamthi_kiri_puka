spring.main.allow-bean-definition-overriding=true
spring.datasource.url=jdbc:postgresql://localhost:5432/tourplannerapp
spring.datasource.username=nertil
spring.datasource.password=kiripass
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
server.port=8081
openrouteservice.api.key=5b3ce3597851110001cf62486302931e26e14c5dbcbc0ac00a076c01
logging.level.org.springframework=DEBUG
logging.level.com.tour_planner_lamthi_kiri_puka=DEBUG
logging.level.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
# At runtime Docker maps our container’s Postgres port (5432) to the host, so the app connects to localhost:5432. 
# The actual Postgres server runs inside a Docker container named tour-planner-db.
# You’d write a simple FROM postgres:15 Dockerfile and put your extra steps on top. But out of the box, the official image is
#ready to go—you just point your app at localhost:5432 (or whatever host port you’ve mapped).